package frames;

import entity.Cliente;
import entity.Factura;
import entity.Producto;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class MainFrame extends javax.swing.JFrame {

    private String direccion;
    private final Factura factura;

    private final BillPrintingFrame billPrintingFrame;

    public MainFrame() {
        initComponents();

        this.setLocationRelativeTo(null);

        this.factura = new Factura();

        int idFactura = (int) ((Math.random() * (9000 - 1000)) + 1000);
        factura.setIdFactura(idFactura);
        factura.setFechaEmision(LocalDateTime.now());

        this.labelNIT.setVisible(false);
        this.txtNIT.setVisible(false);

        this.setVisible(true);

        this.billPrintingFrame = new BillPrintingFrame(this);

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        this.setDireccionDeEmision();
    }

    private void setDireccionDeEmision() {
        int indicator = 1;
        while (indicator == 1) {
            direccion = JOptionPane.showInputDialog(null, "Ingrese la direccion donde se va a emitir la factura", "Sistema de facturas", JOptionPane.PLAIN_MESSAGE);

            if (direccion == null) {
                this.dispose();

                System.exit(0);
            } else {
                if (direccion.equals("")) {
                    JOptionPane.showMessageDialog(null, "La direccion de emision no puede estar vacia.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                } else {
                    if (direccion.length() < 5) {
                        JOptionPane.showMessageDialog(null, "La direccion ingresada no es valida, es muy corta.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                    } else {
                        this.factura.setDireccionEmision(direccion);
                        this.setTitle(this.getTitle() + " - " + direccion);

                        indicator = 0;
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneFacturacion = new javax.swing.JPanel();
        panelDatosCliente = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ComboBoxNIT = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtDireccionCliente = new javax.swing.JTextField();
        labelNIT = new javax.swing.JLabel();
        txtNIT = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDescripcionProducto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCantidadProducto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtValorProducto = new javax.swing.JTextField();
        btnRegistrarProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGenerar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de facturas");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        paneFacturacion.setBackground(new java.awt.Color(204, 204, 204));
        paneFacturacion.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true), "Sistema de facturacion")));

        panelDatosCliente.setBackground(new java.awt.Color(153, 153, 153));
        panelDatosCliente.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Datos del cliente"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jLabel2.setText("Nombre del cliente:");

        txtNombreCliente.setToolTipText("Ingrese el nombre del cliente.");
        txtNombreCliente.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        txtNombreCliente.setName("."); // NOI18N

        jLabel3.setText("Tipo NIT:");

        ComboBoxNIT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C/F", "NIT" }));
        ComboBoxNIT.setToolTipText("Seleccione el tipo de NIT del cliente.");
        ComboBoxNIT.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ComboBoxNIT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxNITItemStateChanged(evt);
            }
        });

        jLabel5.setText("Direccion del cliente:");

        txtDireccionCliente.setToolTipText("Ingrese la direccion del cliente.");
        txtDireccionCliente.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        labelNIT.setText("NIT:");

        txtNIT.setForeground(new java.awt.Color(0, 204, 51));
        txtNIT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNIT.setFocusable(false);

        javax.swing.GroupLayout panelDatosClienteLayout = new javax.swing.GroupLayout(panelDatosCliente);
        panelDatosCliente.setLayout(panelDatosClienteLayout);
        panelDatosClienteLayout.setHorizontalGroup(
            panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDatosClienteLayout.createSequentialGroup()
                        .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDatosClienteLayout.createSequentialGroup()
                                .addComponent(ComboBoxNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNIT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNombreCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelDatosClienteLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addComponent(txtDireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelDatosClienteLayout.setVerticalGroup(
            panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ComboBoxNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNIT)
                    .addComponent(txtNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos de los productos"), new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jLabel1.setText("Descripcion del producto:");

        txtDescripcionProducto.setToolTipText("Ingrese la descripcion del producto.");
        txtDescripcionProducto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel4.setText("Cantidad del producto:");

        txtCantidadProducto.setToolTipText("Ingrese la cantidad del producto comprado.");
        txtCantidadProducto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel6.setText("Valor del producto:");

        txtValorProducto.setToolTipText("Ingrese el valor unitario del producto.");
        txtValorProducto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        btnRegistrarProducto.setText("Registrar");
        btnRegistrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDescripcionProducto)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCantidadProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtValorProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegistrarProducto)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCantidadProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValorProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegistrarProducto)
                        .addContainerGap())))
        );

        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Descripcion", "Cantidad", "Precio unitario", "Subtotal", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.setGridColor(new java.awt.Color(204, 204, 204));
        tableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProductos);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarMouseClicked(evt);
            }
        });

        btnGenerar.setText("Generar");
        btnGenerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGenerarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout paneFacturacionLayout = new javax.swing.GroupLayout(paneFacturacion);
        paneFacturacion.setLayout(paneFacturacionLayout);
        paneFacturacionLayout.setHorizontalGroup(
            paneFacturacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneFacturacionLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(paneFacturacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDatosCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneFacturacionLayout.createSequentialGroup()
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGenerar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        paneFacturacionLayout.setVerticalGroup(
            paneFacturacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneFacturacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDatosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(paneFacturacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnGenerar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneFacturacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneFacturacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxNITItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxNITItemStateChanged
        String nit = "";

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (evt.getItem().toString().equals("NIT")) {
                int indicator = 1;

                while (indicator == 1) {
                    nit = JOptionPane.showInputDialog(null, "Ingrese el NIT del cliente", "Numero de NIT", JOptionPane.PLAIN_MESSAGE);

                    if (nit == null) {
                        nit = "invalid";
                        this.ComboBoxNIT.setSelectedIndex(0);

                        this.labelNIT.setVisible(false);
                        this.txtNIT.setVisible(false);
                        this.txtNIT.setText("");

                        indicator = 0;
                    }

                    boolean isNotEmptyAndHasProperLenght = !nit.isEmpty() && nit.length() >= 9;

                    if (!nit.equals("invalid")) {
                        if (isNotEmptyAndHasProperLenght) {
                            if (!this.containsLettersOrSpecial(this.txtNIT.getText().toCharArray(), Optional.empty())) {
                                JOptionPane.showMessageDialog(null, "El numero de NIT fue correctamente registrado.", "Numero de NIT", JOptionPane.INFORMATION_MESSAGE);

                                this.labelNIT.setVisible(true);
                                this.txtNIT.setVisible(true);
                                this.txtNIT.setText(nit);

                                indicator = 0;
                            } else {
                                JOptionPane.showMessageDialog(null, "El NIT no puede contener letras o caracteres especiales.", "Numero de NIT", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "El numero de caracteres del NIT ingresado no es valido o esta vacio.", "Numero de NIT", JOptionPane.WARNING_MESSAGE);
                        }
                    }

                }
            } else {
                nit = "";

                this.labelNIT.setVisible(false);
                this.txtNIT.setVisible(false);
                this.txtNIT.setText("");
            }
        }
    }//GEN-LAST:event_ComboBoxNITItemStateChanged

    private void fillTablaProducto(List<Producto> lista) {
        DefaultTableModel model = (DefaultTableModel) this.tableProductos.getModel();
        model.setRowCount(0);
        this.tableProductos.setModel(model);

        Object[] data = new Object[this.tableProductos.getColumnCount()];
        DefaultTableModel newModel = (DefaultTableModel) this.tableProductos.getModel();
        for (Producto producto : lista) {
            data[0] = producto.getIdProducto();
            data[1] = producto.getDescripcion();
            data[2] = producto.getCantidad();

            DecimalFormat df = new DecimalFormat("#.##");

            double precioUnitario = Double.parseDouble(df.format(producto.getPrecioUnitario()));
            double subtotal = Double.parseDouble(df.format(producto.getPrecioTotal()));
            double total = Double.parseDouble(df.format(producto.getPrecioTotalIVA()));

            data[3] = "Q." + precioUnitario;
            data[4] = "Q." + subtotal;
            data[5] = "Q." + total;

            newModel.addRow(data);
        }

        this.tableProductos.setModel(newModel);
    }

    private boolean containsLettersOrSpecial(char[] charArray, Optional<Character> charToSkip) {
        String special = "!#$%&'()*+,-./:;<=>?@[]^_`{|}";

        char[] arrSpecial = special.toCharArray();
        for (Character c : charArray) {
            if (Character.isLetter(c)) {
                return true;
            }
            for (Character c2 : arrSpecial) {
                if (charToSkip.isPresent()) {
                    if (!c2.equals(charToSkip.get())) {
                        if (c.equals(c2)) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    private void btnRegistrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarProductoActionPerformed
        if (this.tableProductos.getRowCount() >= 5) {
            this.txtDescripcionProducto.setText("");
            this.txtCantidadProducto.setText("");
            this.txtValorProducto.setText("");

            JOptionPane.showMessageDialog(null, "No se pueden ingresar mas de 5 productos.", "Producto", JOptionPane.ERROR_MESSAGE);
        } else {
            List<Producto> listaProducto;

            Optional<List<Producto>> optLista = Optional.ofNullable(factura.getListaProductos());
            if (optLista.isPresent()) {
                listaProducto = optLista.get();
            } else {
                listaProducto = new ArrayList<>();
            }

            boolean descripcionV = false, cantidadV = false, precioV = false;

            Producto producto = new Producto();
            int idProducto = (int) ((Math.random() * (9000 - 1000)) + 1000);

            producto.setIdProducto(idProducto);

            if (this.txtDescripcionProducto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "La descripcion del producto no puede estar vacia.", "Producto", JOptionPane.WARNING_MESSAGE);
            } else {
                producto.setDescripcion(this.txtDescripcionProducto.getText());
                descripcionV = true;
            }

            if (this.txtCantidadProducto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe ingresar una cantidad de producto.", "Producto", JOptionPane.WARNING_MESSAGE);
            } else {
                if (this.containsLettersOrSpecial(this.txtCantidadProducto.getText().toCharArray(), Optional.empty())) {
                    JOptionPane.showMessageDialog(null, "No se pueden ingresar letras o caracteres especiales en la casilla de cantidad del producto.", "Producto", JOptionPane.WARNING_MESSAGE);
                } else {
                    int cantidad = Integer.parseInt(this.txtCantidadProducto.getText());
                    if (cantidad < 0) {
                        JOptionPane.showMessageDialog(null, "Debe ingresar una cantidad mayor a 0.", "Producto", JOptionPane.WARNING_MESSAGE);
                    } else {
                        producto.setCantidad(cantidad);
                        cantidadV = true;
                    }
                }
            }

            if (this.txtValorProducto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe ingresar el precio del producto.", "Producto", JOptionPane.WARNING_MESSAGE);
            } else {
                if (this.containsLettersOrSpecial(this.txtValorProducto.getText().toCharArray(), Optional.of('.'))) {
                    JOptionPane.showMessageDialog(null, "No se pueden ingresar letras o caracteres especiales en la casilla de precio del producto.", "Producto", JOptionPane.WARNING_MESSAGE);
                } else {
                    double precio = Double.parseDouble(this.txtValorProducto.getText());
                    if (precio < 0) {
                        JOptionPane.showMessageDialog(null, "Debe ingresar un precio mayor a 0.", "Producto", JOptionPane.WARNING_MESSAGE);
                    } else {
                        producto.setPrecioUnitario(precio);

                        double precioTotal = precio * Double.parseDouble(this.txtCantidadProducto.getText());
                        producto.setPrecioTotal(precioTotal);

                        double precioIva = producto.getPrecioTotal() * 0.12;
                        double precioTotalIVA = producto.getPrecioTotal() + precioIva;

                        producto.setPrecioTotalIVA(precioTotalIVA);
                        precioV = true;
                    }
                }
            }

            if (descripcionV && cantidadV && precioV) {
                listaProducto.add(producto);
                factura.setListaProductos(listaProducto);

                this.fillTablaProducto(listaProducto);

                JOptionPane.showMessageDialog(null, "Informacion de producto correctamente agregada.", "Producto", JOptionPane.INFORMATION_MESSAGE);

                this.txtDescripcionProducto.setText("");
                this.txtCantidadProducto.setText("");
                this.txtValorProducto.setText("");
            }
        }
    }//GEN-LAST:event_btnRegistrarProductoActionPerformed

    private void tableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductosMouseClicked
        int row = this.tableProductos.getSelectedRow();
        int column = this.tableProductos.getSelectedColumn();

        if (row != -1) {
            if (row != 4) {
                int idProducto = Integer.parseInt(this.tableProductos.getValueAt(row, 0).toString());

                List<Producto> nuevaLista;

                Optional<List<Producto>> optLista = Optional.ofNullable(this.factura.getListaProductos());
                if (optLista.isPresent()) {
                    List<Producto> listaVieja = optLista.get();
                    Producto producto = listaVieja.stream().filter(p -> p.getIdProducto() == idProducto).findFirst().get();

                    int index = listaVieja.indexOf(producto);
                    switch (column) {
                        case 0: {
                            if (JOptionPane.showConfirmDialog(null, "Deseas eliminar el producto con el ID: " + producto.getIdProducto() + " de la lista de productos?", "Advertencia",
                                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                listaVieja.remove(index);
                                nuevaLista = listaVieja;

                                factura.setListaProductos(nuevaLista);
                                this.fillTablaProducto(nuevaLista);

                                JOptionPane.showMessageDialog(null, "El elemento fue borrado de la lista de productos.", "Producto", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                /////////////////////////////////////////////////////////////
                            }
                            break;
                        }
                        case 1: {
                            String descripcion = "";

                            int indicator = 1;
                            while (indicator == 1) {
                                descripcion = JOptionPane.showInputDialog(null, "Ingrese la nueva descripcion del producto", "Producto", JOptionPane.PLAIN_MESSAGE);

                                if (descripcion == null) {
                                    indicator = 0;
                                } else {
                                    if (descripcion.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "No se puede dejar la descripcion del producto en blanco.", "Producto", JOptionPane.WARNING_MESSAGE);
                                    } else {
                                        producto.setDescripcion(descripcion);

                                        listaVieja.remove(index);
                                        nuevaLista = listaVieja;

                                        nuevaLista.add(index, producto);

                                        factura.setListaProductos(nuevaLista);
                                        this.fillTablaProducto(nuevaLista);

                                        JOptionPane.showMessageDialog(null, "La descripcion del producto con el ID: " + idProducto + " fue correctamente modificada.", "Producto", JOptionPane.INFORMATION_MESSAGE);

                                        indicator = 0;
                                    }
                                }
                            }
                            break;
                        }
                        case 2: {
                            String cantidad = "";

                            int indicator = 1;
                            while (indicator == 1) {
                                cantidad = JOptionPane.showInputDialog(null, "Ingrese la nueva descripcion del producto", "Producto", JOptionPane.PLAIN_MESSAGE);

                                if (cantidad == null) {
                                    indicator = 0;
                                } else {
                                    if (cantidad.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "No se puede dejar la descripcion del producto en blanco.", "Producto", JOptionPane.WARNING_MESSAGE);
                                    } else {
                                        if (this.containsLettersOrSpecial(cantidad.toCharArray(), Optional.empty())) {
                                            JOptionPane.showMessageDialog(null, "La cantidad no puede contener letras o caracteres especiales.", "Producto", JOptionPane.WARNING_MESSAGE);
                                        } else {
                                            int parseCantidad = Integer.parseInt(cantidad);
                                            if (parseCantidad <= 0) {
                                                JOptionPane.showMessageDialog(null, "La cantidad no puede ser menor o igual a 0.", "Producto", JOptionPane.WARNING_MESSAGE);
                                            } else {
                                                double nuevoPrecioTotal = parseCantidad * producto.getPrecioUnitario();

                                                producto.setCantidad(parseCantidad);
                                                producto.setPrecioTotal(nuevoPrecioTotal);

                                                double nuevoPrecioIVA = producto.getPrecioTotal() * 0.12;
                                                double nuevoPrecioTotalIVA = producto.getPrecioTotal() + nuevoPrecioIVA;

                                                producto.setPrecioTotalIVA(nuevoPrecioTotalIVA);

                                                listaVieja.remove(index);
                                                nuevaLista = listaVieja;

                                                nuevaLista.add(index, producto);

                                                factura.setListaProductos(nuevaLista);
                                                this.fillTablaProducto(nuevaLista);

                                                JOptionPane.showMessageDialog(null, "La cantidad del producto con el ID: " + idProducto + " fue correctamente modificada.", "Producto", JOptionPane.INFORMATION_MESSAGE);

                                                indicator = 0;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                        case 3: {
                            String precio_unitario = "";

                            int indicator = 1;
                            while (indicator == 1) {
                                precio_unitario = JOptionPane.showInputDialog(null, "Ingrese el nuevo precio unitario del producto", "Producto", JOptionPane.PLAIN_MESSAGE);

                                if (precio_unitario == null) {
                                    indicator = 0;
                                } else {
                                    if (precio_unitario.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "No se puede el precio unitario del producto en blanco.", "Producto", JOptionPane.WARNING_MESSAGE);
                                    } else {
                                        if (this.containsLettersOrSpecial(precio_unitario.toCharArray(), Optional.of('.'))) {
                                            JOptionPane.showMessageDialog(null, "El precio unitario no puede contener letras o caracteres especiales.", "Producto", JOptionPane.WARNING_MESSAGE);
                                        } else {
                                            double parsePrecioUnitario = Double.parseDouble(precio_unitario);
                                            if (parsePrecioUnitario <= 0) {
                                                JOptionPane.showMessageDialog(null, "El precio unitario no puede ser menor o igual a 0.", "Producto", JOptionPane.WARNING_MESSAGE);
                                            } else {
                                                double nuevoPrecioTotal = parsePrecioUnitario * producto.getCantidad();

                                                producto.setPrecioUnitario(parsePrecioUnitario);
                                                producto.setPrecioTotal(nuevoPrecioTotal);

                                                double nuevoPrecioIVA = producto.getPrecioTotal() * 0.12;
                                                double nuevoPrecioTotalIVA = producto.getPrecioTotal() + nuevoPrecioIVA;

                                                producto.setPrecioTotalIVA(nuevoPrecioTotalIVA);

                                                listaVieja.remove(index);
                                                nuevaLista = listaVieja;

                                                nuevaLista.add(index, producto);

                                                factura.setListaProductos(nuevaLista);
                                                this.fillTablaProducto(nuevaLista);

                                                JOptionPane.showMessageDialog(null, "El precio unitario del producto con el ID: " + idProducto + " fue correctamente modificado.", "Producto", JOptionPane.INFORMATION_MESSAGE);

                                                indicator = 0;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_tableProductosMouseClicked

    private void btnLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMouseClicked
        if (!this.billPrintingFrame.isVisible()) {
            if (JOptionPane.showConfirmDialog(null, "Deseas eliminar todos los datos de la factura.", "Advertencia",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                this.txtNombreCliente.setText("");
                this.txtDireccionCliente.setText("");
                this.ComboBoxNIT.setSelectedIndex(0);
                this.txtNIT.setText("");

                this.labelNIT.setVisible(false);
                this.txtNIT.setVisible(false);

                this.txtDescripcionProducto.setText("");
                this.txtCantidadProducto.setText("");
                this.txtValorProducto.setText("");

                this.factura.setListaProductos(new ArrayList<>());

                DefaultTableModel model = (DefaultTableModel) this.tableProductos.getModel();
                model.setRowCount(0);
                this.tableProductos.setModel(model);
            } else {
                /////////////////////////////////////////////
            }
        }
    }//GEN-LAST:event_btnLimpiarMouseClicked

    private void btnGenerarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerarMouseClicked
        if (!this.billPrintingFrame.isVisible()) {
            if (!this.txtNombreCliente.getText().isEmpty()) {
                String name = this.txtNombreCliente.getText();
                Cliente cliente = new Cliente();
                String numbers = "0123456789";
                boolean nameContainsNumber = false;
                for (Character c : name.toCharArray()) {
                    for (Character n : numbers.toCharArray()) {
                        if (c.equals(n)) {
                            nameContainsNumber = true;
                            break;
                        }
                    }
                }
                if (!nameContainsNumber) {
                    if (!this.txtDireccionCliente.getText().isEmpty()) {
                        Optional<List<Producto>> optLista = Optional.ofNullable(this.factura.getListaProductos());
                        if (optLista.isPresent()) {
                            List<Producto> lista = optLista.get();
                            if (!lista.isEmpty()) {
                                cliente.setNombre(name);
                                if (this.ComboBoxNIT.getSelectedIndex() == 1) {
                                    cliente.setNit(Optional.of(Integer.valueOf(this.txtNIT.getText())));
                                } else {
                                    cliente.setNit(Optional.empty());
                                }
                                cliente.setDireccion(this.txtDireccionCliente.getText());
                                this.factura.setCliente(cliente);

                                double total = lista.get(0).getPrecioTotalIVA();
                                for (int i = 1; i < lista.size(); i++) {
                                    total += lista.get(i).getPrecioTotalIVA();
                                }

                                this.factura.setTotal(total);

                                this.billPrintingFrame.setFactura(this.factura);
                                this.billPrintingFrame.printFactura();
                            } else {
                                JOptionPane.showMessageDialog(null, "La lista de productos no puede estar vacia.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "La lista de productos no puede estar vacia.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La direccion del cliente no puede estar vacia.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El nombre del cliente no puede contener numeros.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre del cliente no puede estar vacio.", "Sistema de facturas", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGenerarMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxNIT;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRegistrarProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNIT;
    private javax.swing.JPanel paneFacturacion;
    private javax.swing.JPanel panelDatosCliente;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtCantidadProducto;
    private javax.swing.JTextField txtDescripcionProducto;
    private javax.swing.JTextField txtDireccionCliente;
    private javax.swing.JTextField txtNIT;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtValorProducto;
    // End of variables declaration//GEN-END:variables
}
